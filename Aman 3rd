// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ErrorHandlingExample {
    address public owner;
    uint256 public value;

    constructor() {
        owner = msg.sender; // Set the contract deployer as the owner
    }

    // Function to set a value with require statement
    function setValue(uint256 _value) public {
        require(_value > 0, "Value must be greater than 0");
        value = _value;
    }

    // Function to check ownership with require statement
    function onlyOwner() public view {
        require(msg.sender == owner, "Caller is not the owner");
    }

    // Function demonstrating assert statement
    function useAssert() public view {
        // This should always be true
        assert(owner == msg.sender);
    }

    // Function demonstrating revert statement
    function useRevert(uint256 _value) public pure {
        if (_value <= 0) {
            revert("Value must be greater than 0");
        }
    }

    // Function demonstrating both require and revert
    function complexFunction(uint256 _value) public {
        require(_value != 10, "Value cannot be 10");

        if (_value == 5) {
            revert("Value cannot be 5");
        }

        value = _value;
    }
}
